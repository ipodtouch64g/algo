#include <iostream>
#include <random>
#include <algorithm>
#include <fstream>
#include <chrono>
#define size 1700000
using namespace std;

void randNum(int randArr[])
{
  random_device rd;
  std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
  std::uniform_int_distribution<> dis(-2147483648, 2147483647);
  for (int n=0; n<size; ++n)
      //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
      randArr[n] = dis(gen);
}

int main(){
  ofstream randomNums,fpo;

  //randomNums.open("randomNums.txt",ios::out);
  fpo.open("output.txt",ios::out);
  int o=0;
  cin>>o;
  int *arr = new int[size];
  randNum(arr);

  // int *arr_quick = new int[size];
  // copy(arr,arr+size,arr_quick);

  //
  // for(int i=0;i<size;i++)
  //  randomNums<<arr[i]<<" ";

  // auto start = std::chrono::high_resolution_clock::now();
  // sort(arr_quick,arr_quick+size);
  // auto end = std::chrono::high_resolution_clock::now();
  // chrono::duration<double> elapsed = end - start;
  // fpo<<"Quick:"<<elapsed.count()<<endl;


  auto start = std::chrono::high_resolution_clock::now();
  for(int i=1;i<size;i++)
  {
    int tmp=arr[i],j=0;
    for(j=i;j>0 && tmp < arr[j-1] ;j--)
      arr[j] = arr[j-1];
    arr[j] = tmp;
  }
  auto end = std::chrono::high_resolution_clock::now();
  chrono::duration<double> elapsed = end - start;

  fpo<<"Insertion:"<<elapsed.count()<<endl;
  fpo<<arr[o-1]<<endl;

  /*if (equal(arr,arr+size,arr_quick))
    fpo << "Arrays are equal.";
  else
    fpo << "Arrays are not equal.";




  randomNums.close();*/
  fpo.close();
  return 0;

}
